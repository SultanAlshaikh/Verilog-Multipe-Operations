module project1T (A, B, v, m, Y, S, I0,I1,I2,I3);
input [3:0] A, B;
input m;
input [1:0] S;
wire [3:0] SUM, z, z1, z2;
output [3:0] I0,I1,I2,I3;
wire cout;
output v;
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
Full_adder4bit d0 (A, B, v, m, SUM,cout) ;
AND4b d1 (A, B,z) ;
OR4b d2 (A, B,z1) ;	. 
XOR4b d3 (A, B,z2) ;
assign I0 = SUM;
assign I1 = z ;
assign I2 = z1 ;
assign I3 = z2 ;
output reg [3:0] Y;
always @(S or I0 or I1 or I2 or I3)
 case (S)
 0: Y = I0;
 1: Y = I1;
 2: Y = I2;
 3: Y = I3;
 endcase
endmodule
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ


module Full_adder4bit(A, B, v, m, S,cout);
input [3:0] A, B;
input m;
output [3:0] S;
output cout, v;
wire c1, c2, c3, Fb0, Fb1, Fb2, Fb3;
assign Fb0= m ^ B[0];
assign Fb1= m ^ B[1];
assign Fb2= m ^ B[2];
assign Fb3= m ^ B[3];
assign v= c3 ^ cout;
fulladder fa0 (A[0], Fb0, m, S[0], c1);
fulladder fa1 (A[1], Fb1 , c1, S[1], c2);
fulladder fa2 (A[2], Fb2, c2, S[2], c3);
fulladder fa3 (A[3], Fb3, c3, S[3], cout);
endmodule
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
module fulladder(x, y, cin, s, cout);
input x, y, cin;
output s, cout;
wire w1, w2, w3; 
 and A1(w1, x, cin);
 and A2(w2, y, cin);
 and A3(w3, x, y);
 or O1(cout, w1, w2, w3);
 xor XR(s, x, y, cin);
endmodule
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
module AND4b (x, y,z);
input [3:0] x, y;
output [3:0] z;
assign z [0] = x[0] & y[0];
assign z [1] = x[1] & y[1];
assign z [2] = x[2] & y[2];
assign z [3] = x[3] & y[3];
endmodule
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
module OR4b (x, y,z);
input [3:0] x, y;
output [3:0] z;
assign z [0] = x[0] | y[0];
assign z [1] = x[1] | y[1];
assign z [2] = x[2] | y[2];
assign z [3] = x[3] | y[3];
endmodule
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
module XOR4b (x, y,z);
input [3:0] x, y;
output [3:0] z;
assign z [0] = x[0] ^ y[0];
assign z [1] = x[1] ^ y[1];
assign z [2] = x[2] ^ y[2];
assign z [3] = x[3] ^ y[3];
endmodule
